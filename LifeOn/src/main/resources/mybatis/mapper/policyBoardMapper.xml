<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.PolicyBoardMapper">

	<insert id="insertBoard" parameterType="com.sp.app.model.PolicyBoard">
	INSERT INTO policy_board (psnum, subject, content, reg_date, hitcount, savefilename, originalfilename, block, userId)
	VALUES (policy_board_seq.NEXTVAL, #{subject}, #{content}, SYSDATE, 0, #{savefilename, jdbcType=VARCHAR}, #{originalfilename, jdbcType=VARCHAR}, 0, #{userId})
	</insert>

	<sql id="where-list">
		<choose>
			<when test="schType == 'all'">
				( INSTR(subject, #{kwd}) &gt; 0
			    	OR DBMS_LOB.INSTR(content, #{kwd}) &gt; 0 )
			</when>
			<when test="schType == 'reg_date'">
				( TO_CHAR(reg_date, 'YYYY-MM-DD') = #{kwd}
			    	OR TO_CHAR(reg_date, 'YYYYMMDD') = #{kwd} )
			</when>
			<when test="schType == 'content'">
				DBMS_LOB.INSTR(content, #{kwd}) &gt; 0
			</when>
			<otherwise>
				INSTR(${schType}, #{kwd}) &gt; 0
			</otherwise>
		</choose>
	  </sql>
	  
	  <select id="dataCount" parameterType="map" resultType="Integer">
	  SELECT NVL(COUNT(b.psnum), 0)
	  FROM policy_board b
	  JOIN member m ON b.userId = m.id
	  	<where>
      		<if test="kwd !=null and kwd != ''">
      			<include refid="where-list"/>
      		</if>
      		AND b.block = 0 
      	</where>
	  </select>
	  
	  <select id="listBoard" parameterType="map" resultType="com.sp.app.model.PolicyBoard">
	  	SELECT b.psnum, b.subject, b.content, b.reg_date, b.hitcount, b.savefilename, b.originalfilename, b.block, m.nickname
		FROM policy_board b
		JOIN member m ON b.userId = m.id	  
		<where>
     		<if test="kwd != null and kwd != ''">
     			<include refid="where-list"/>
     		</if>
     		AND b.block = 0
     	</where>
     	ORDER BY b.psnum DESC
     	OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	  </select> 
	
	  <select id="findById" parameterType="long" resultType="com.sp.app.model.PolicyBoard">
	  	SELECT b.psnum, b.subject, b.content, b.hitcount, b.reg_date, b.savefilename, b.originalfilename, b.block, m.nickname, b.userId, NVL(boardLikeCount, 0) boardLikeCount
	  	FROM policy_board b
	  	JOIN member m ON b.userId = m.id
	  	LEFT OUTER JOIN (
	  		SELECT psnum, COUNT(*) boardLikeCount
	  		FROM policy_board_like
	  		WHERE psnum = #{psnum}
	  		GROUP BY psnum
	  	) bc ON b.psnum = bc.psnum
	  	WHERE b.psnum = #{psnum} AND b.block = 0
	  </select>
	  
	  <select id="findByPrev" parameterType="map" resultType="com.sp.app.model.PolicyBoard">
	  		SELECT b.psnum, b.subject
      		FROM policy_board b
      		JOIN member m ON b.userId = m.id
      	<where>
      		<if test="kwd != null and kwd != '' ">
      			<include refid = "where-list"/>
      		</if>
      		AND (b.psnum &gt; #{psnum})
      		AND b.block = 0
      	</where>
      	ORDER BY b.psnum ASC
      	FETCH FIRST 1 ROWS ONLY 
	  </select>
	  
	  <select id="findByNext" parameterType="map" resultType="com.sp.app.model.PolicyBoard">
	  	SELECT b.psnum, b.subject
      	FROM policy_board b
      	JOIN member m ON b.userId = m.id
      	<where>
      		<if test="kwd != null and kwd != '' ">
      			<include refid = "where-list"/>
      		</if>
      		AND (b.psnum &lt; #{psnum})
      		AND b.block = 0
      	</where>
      	ORDER BY b.psnum DESC
      	FETCH FIRST 1 ROWS ONLY
	  </select>
	  
	   <update id="updateHitCount" parameterType="Long">
      	UPDATE policy_board SET hitcount=hitcount + 1
      	WHERE psnum=#{psnum}
      </update>
      
      <update id="updateBoard" parameterType="com.sp.app.model.PolicyBoard">
      	UPDATE policy_board SET subject=#{subject}, content=#{content},
      	savefilename = #{savefilename, jdbcType=VARCHAR},
      	originalfilename = #{originalfilename, jdbcType=VARCHAR}
      	WHERE psnum = #{psnum}
      </update>
      
        <delete id="deleteBoard" parameterType="Long">
      		DELETE FROM policy_board
      		WHERE psnum=#{psnum}
      </delete>
      
      <!-- 게시글 좋아요 -->
      <insert id="insertBoardLike" parameterType="map">
      		INSERT INTO policy_board_like(psnum, userId)
      		VALUES (#{psnum}, #{userId})
      </insert>
      
      <delete id="deleteBoardLike" parameterType="map">
      		DELETE FROM policy_board_like
      		WHERE psnum=#{psnum} AND userId=#{userId}
      </delete>
      
      <select id="boardLikeCount" parameterType="Long" resultType="Integer">
      		SELECT COUNT(*)
      		FROM policy_board_like
      		WHERE psnum = #{psnum}
      </select>
      
      <select id="userBoardLike" parameterType="map" resultType="com.sp.app.model.PolicyBoard">
      		SELECT psnum, userid
      		FROM policy_board_like
      		WHERE psnum = #{psnum} AND userId = #{userId}
      </select>
      
	  
</mapper>