<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.mapper.PolicyBoardMapper">

	<!-- NULL을 허용한 컬럼은 jdbcType을 명시해야 한다. -->
	<insert id="insertPolicy"
		parameterType="com.sp.app.model.PolicyBoard">
		<selectKey keyProperty="psnum" resultType="long"
			order="BEFORE">
			SELECT policy_board_seq.NEXTVAL FROM dual
		</selectKey>
		INSERT INTO policy_board (psnum, num, subject, content, reg_date,
		hitCount)
		VALUES (#{psnum}, #{num}, #{subject}, #{content}, SYSDATE, 0)
	</insert>

	<sql id="where-list">
		<choose>
			<when test="schType == 'all'">
				( INSTR(subject, #{kwd}) &gt; 0
					OR DBMS_LOB.INSTR(content, #{kwd}) &gt; 0 )
			</when>
			<when test="schType == 'reg_date'">
				( TO_CHAR(reg_date, 'YYYY-MM-DD') = #{kwd}
			    	OR TO_CHAR(reg_date, 'YYYYMMDD') = #{kwd} )
			</when>
			<when test="schType == 'content'">
				DBMS_LOB.INSTR(content, #{kwd}) &gt; 0
			</when>
			<otherwise>
				INSTR(${schType}, #{kwd}) &gt; 0
			</otherwise>
		</choose>
	</sql>

	<insert id="insertPolicyFile"
		parameterType="com.sp.app.model.PolicyBoardFile">
		<selectKey keyProperty="fnum" resultType="long" order="BEFORE">
			SELECT policy_board_file_seq.NEXTVAL FROM dual
		</selectKey>
		INSERT INTO policy_board_file (fnum, psnum, ssfname, cpfname)
		VALUES (#{fnum}, #{psnum}, #{ssfname}, #{cpfname})
	</insert>
	
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(psnum), 0)
		FROM policy_board b
		JOIN member m ON b.num = m.num
			<where>
				<if test="kwd !=null and kwd != ''">
					<include refid="where-list"/>
				</if>
			</where>
	</select>
	
	<select id="listPolicy" parameterType="map" resultType="com.sp.app.model.PolicyBoard">
		SELECT b.psnum, b.subject, TO_CHAR(b.reg_date, 'yyyy-mm-dd') AS reg_date, b.hitcount, 
		(SELECT m.nickname FROM member m WHERE m.num=b.num) AS nickname, 
		(SELECT f.cpfname FROM policy_board_file f WHERE f.psnum=b.psnum) AS cpfname
		FROM policy_board b 
		<where>
			<if test="kwd != null and kwd != ''">
				<include refid="where-list"/>
			</if>
		</where>
		ORDER BY b.psnum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
	<update id="updateHitCount" parameterType="Long">
		UPDATE policy_board SET hitcount = hitcount + 1
		WHERE psnum=#{num}
	</update>
	
	<select id="findById" parameterType="Long" resultType="com.sp.app.model.PolicyBoard">
		SELECT b.psnum, b.num, b.subject, b.content, TO_CHAR(b.reg_date, 'YYYY-MM-DD') AS reg_date,
		b.hitcount, m.nickname, f.ssfname, f.cpfname
		FROM policy_board b
		JOIN member m ON b.num = m.num
		LEFT JOIN policy_board_file f ON b.psnum = f.psnum
		WHERE b.psnum = #{num}
	</select>
	
	<select id="findByPrev" parameterType="map" resultType="com.sp.app.model.PolicyBoard">
		SELECT psnum, subject
		FROM policy_board
		<where>
			<if test="kwd !=null and kwd != '' ">
				<include refid = "where-list"/>
			</if>
			AND (psnum &gt; #{num})
		</where>
		ORDER BY psnum ASC
		FETCH FIRST 1 ROWS ONLY
	</select>	
	
	<select id="findByNext" parameterType="map" resultType="com.sp.app.model.PolicyBoard">
		SELECT psnum, subject
		FROM policy_board
		<where>
			<if test="kwd !=null and kwd != ''" >
				<include refid = "where-list"/>
			</if>
			AND (psnum &lt; #{num})
		</where>
		ORDER BY psnum ASC
		FETCH FIRST 1 ROWS ONLY
	</select>	
	
	<update id="updatePolicyBoard" parameterType="com.sp.app.model.PolicyBoard">
		UPDATE policy_board SET subject=#{subject}, content=#{content}
		WHERE psnum = #{num}
	</update>
	
	<update id="updatePolicyBoardFile" parameterType="com.sp.app.model.PolicyBoard">
		UPDATE policy_board_file SET ssfname=#{saveFilename, jdbcType=VARCHAR}, cpfname=#{originalfilename, jdbcType=VARCHAR}
		WHERE fnum = #{num}
	</update>
	
	<delete id="deletePolicy" parameterType="Long">
		DELETE FROM policy_board
		WHERE psnum=#{num}
	</delete>
	
	</mapper>