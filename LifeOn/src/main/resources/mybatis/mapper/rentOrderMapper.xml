<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sp.app.rent.mapper.RentOrderMapper">

	<!-- 대여물품 주문 -->
	<insert id="insertRentProductOrder" parameterType="com.sp.app.rent.model.RentProductOrder">
		INSERT ALL
			INTO ORD (onum, od, op, odpp, oup, ofp, os, num)
				VALUES (ord_seq.NEXTVAL, SYSDATE, #{op}, 0, #{oup}, #{ofp}, '결제완료', #{num})
				
			INTO ORD_DETAIL (odnum, onum, odq, odp, ods, pnum)
				VALUES (ord_detail_seq.NEXTVAL, ord_seq.CURRVAL, #{odq}, #{odp}, 0 ,#{pnum})
				
			INTO ORD_PRODCUT_RENT (onum, opsd, oped, oprs, oplp)
				VALUES (ord_seq.CURRVAL, #{opsd, jdbcType=VARCHAR}, #{oped, jdbcType=VARCHAR}, '대여중', #{oplp})
		SELECT * FROM dual
	</insert>
	
	<!-- 회원 포인트 조회 -->
	<select id="memberPoint" parameterType="long" resultType="Integer">
		SELECT COALESCE(SUM(pretp), 0) memberPoint
		FROM (
		    SELECT pretp
		    FROM POINT_RECORD
		    WHERE num = #{num}
		    ORDER BY PREPD DESC
		) WHERE ROWNUM = 1
	</select>
	
	<insert id="insertPoint" parameterType="com.sp.app.rent.model.RentProductOrder">
		INSERT INTO POINT_RECORD (prnum, prec, pret, prep, pretp, prepd, num)
			VALUES (point_record_seq.NEXTVAL, '물품대여', '사용', #{prep}, #{pretp}, SYSDATE, #{num})
	</insert>
	
	<!-- 대여신청이 들어오면 물품대여상태 업데이트 -->
	<update id="updateStatus" parameterType="com.sp.app.rent.model.RentProductOrder">
		UPDATE PRODUCT_RENT SET prs = '대여중'
		WHERE pnum = #{pnum}
	</update>
	
	<!-- 반납이 되지 않았을 경우 연체기간 업데이트 -->
	<update id="updateRentProductOrder" parameterType="com.sp.app.rent.model.RentProductOrder">
		UPDATE ORD_PRODCUT_RENT SET opld = 1
		WHERE onum = #{onum}
	</update>
	
	<!-- 판매리스트에 출력되는 물품개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM ORD_PRODCUT_RENT r
		JOIN ORD o ON r.onum = o.onum
        WHERE num = #{num}
	</select>
	
	<!-- 판매된 전체 물품 리스트 -->
	<select id="listRentProductOrder" parameterType="map" resultType="com.sp.app.rent.model.RentProductOrder">
		SELECT p.pnum, pname, pct, pph, p.num, cbn, c.csn, csc, prp, prd, prs, pra, prlp
		FROM PRODUCT p
		JOIN PRODUCT_RENT pr ON p.pnum = pr.pnum

		ORDER BY pnum DESC
		OFFSET #{offset} ROWS FETCH FIRST #{size} ROWS ONLY
	</select>
	
</mapper>